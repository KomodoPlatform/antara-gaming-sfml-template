name: CI

on: [push, pull_request]

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        name: [
          ubuntu-18-04-clang-8-debug,
          windows-2019-clang-cl-debug,
          macos-10-14-clang-8-debug,
          macos-10-14-clang-9-debug,
          ubuntu-18-04-clang-8-release,
          windows-2019-clang-cl-release,
          macos-10-14-clang-8-release,
          macos-10-14-clang-9-release,
        ]

        include:

          - name: ubuntu-18-04-clang-8-debug
            os: ubuntu-18.04
            cmake_build_type: Debug
            compiler: clang
            version: "8"

          - name: windows-2019-clang-cl-debug
            cmake_build_type: Debug
            os: windows-2019
            compiler: clang-cl

          #- name: windows-2019-clang-debug
          #  cmake_build_type: Debug
          #  os: windows-2019
          #  compiler: clang

          - name: macos-10-14-clang-8-debug
            cmake_build_type: Debug
            os: macOS-10.14
            compiler: clang
            version: "8"

          - name: macos-10-14-clang-9-debug
            cmake_build_type: Debug
            os: macOS-10.14
            compiler: clang
            version: "9"

          - name: ubuntu-18-04-clang-8-release
            os: ubuntu-18.04
            cmake_build_type: Release
            compiler: clang
            version: "8"

          - name: windows-2019-clang-cl-release
            cmake_build_type: Release
            os: windows-2019
            compiler: clang-cl

          #- name: windows-2019-clang-release
          #  cmake_build_type: Release
          #  os: windows-2019
          #  compiler: clang

          - name: macos-10-14-clang-8-release
            cmake_build_type: Release
            os: macOS-10.14
            compiler: clang
            version: "8"

          - name: macos-10-14-clang-9-release
            cmake_build_type: Release
            os: macOS-10.14
            compiler: clang
            version: "9"


    steps:
      - uses: actions/checkout@v1

      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          curl -sSL https://github.com/Kitware/CMake/releases/download/v3.15.3/cmake-3.15.3-Linux-x86_64.tar.gz -o cmake.tar.gz
          sudo tar xf cmake.tar.gz --strip 1 -C /usr/local
          sudo apt-get install ninja-build

            # LLVM 9 is not yet in bionic's repositories.
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y clang-${{ matrix.version }} lld-${{ matrix.version }} libstdc++-${{ matrix.version }}-dev gcc-8 g++-8 libc++-${{ matrix.version }}-dev libc++abi-${{ matrix.version }}-dev
          sudo apt-get install -y libx11-dev libgl1-mesa-dev libudev-dev libfreetype6-dev libopenal-dev libflac-dev libvorbis-dev libxinerama-dev libxrandr-dev libxi-dev libxcursor-dev
          echo "::set-env name=CC::clang-${{ matrix.version }}"
          echo "::set-env name=CXX::clang++-${{ matrix.version }}"

      - name: Install (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config freetype
          pkg-config --cflags freetype2
          brew install ninja
          brew install llvm@${{ matrix.version}}
          echo "::set-env name=CC::/usr/local/opt/llvm@${{ matrix.version}}/bin/clang"
          echo "::set-env name=CXX::/usr/local/opt/llvm@${{ matrix.version}}/bin/clang++"
          sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /


      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
          scoop install ninja llvm --global

          if ("${{ matrix.compiler }}" -eq "clang") {
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          } else {
            echo "::set-env name=CC::${{ matrix.compiler }}"
            echo "::set-env name=CXX::${{ matrix.compiler }}"
          }

          & .github\workflows\vsenv.bat -arch=x64 -host_arch=x64

      - name: Configure
        env:
          ANTARA_BUILD_TYPE: ${{matrix.cmake_build_type}}
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          cmake -B build -S . -G Ninja -DCMAKE_BUILD_TYPE=${ANTARA_BUILD_TYPE} -DUSE_LUA_ANTARA_WRAPPER=ON -DUSE_SFML_ANTARA_WRAPPER=ON

      - name: Configure (Windows)
        env:
          ANTARA_BUILD_TYPE: ${{matrix.cmake_build_type}}
        if: runner.os == 'Windows'
        run: |
          cmake -B build -S . -G Ninja -DCMAKE_BUILD_TYPE=${ANTARA_BUILD_TYPE} -DUSE_LUA_ANTARA_WRAPPER=ON -DUSE_SFML_ANTARA_WRAPPER=ON

      - name: Build
        run: cmake --build build --config ${{matrix.cmake_build_type}}
